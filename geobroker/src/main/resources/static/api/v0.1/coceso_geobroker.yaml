openapi: "3.0.0"
info:
  title: Geobroker
  description: |
    The geobroker API actually provides two APIs - private and public.
    A firewall or proxy is required to grant or block access to either interface.

    > **Note:** error responses are not yet designed. Expect plain text messages in the response for now.

    > **Note:** the geobroker tracks three types of objects: units, incidents, and POIs. POIs are neither defined nor implemented yet.
  version: v0.1
  license:
    name: MIT
servers:
  - url: /api/v0.1
tags:
  - name: Public API
    description: |
      The public API allows position updates for each unit with their authentication (token).

      The output on the public API is restricted in two ways:
        - a unit may only see some objects as set via the related entities on the private API
        - individual objects only share public properties, see <a href="#model-publicUnit">publicUnit</a>
  - name: Private API (CRUD)
    description: |
      CRUD operations for all geo objects (units, incidents, POIs).
      Geo objects might contain sensitive information that is not available on the public API.
  - name: Private API (relations)
    description: |
      The entities listed under a unit are visible to that unit on the public API.
      The information is stored as reference on the id of the other object.

      These related entities can be read and written as properties of unit objects, but the lists are also exposed on the API.
paths:
  /units:
    get:
      tags: ["Private API (CRUD)"]
      operationId: getAllUnits
      summary: Get all units in the broker.
      responses:
        '200':
          description: list of all units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/unit'
  /units/{unitId}:
    parameters:
      - $ref: '#/components/parameters/unitId'
    get:
      tags: ["Private API (CRUD)"]
      operationId: getUnit
      summary: Get a unit in the broker.
      responses:
        '200':
          description: returns the requested unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unit'
    put:
      tags: ["Private API (CRUD)"]
      operationId: createUnit
      summary: Create or replace a unit in the broker.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unit'
      responses:
        '200':
          description: returns the new unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unit'
    delete:
      tags: ["Private API (CRUD)"]
      operationId: deleteUnit
      summary: Delete an existing unit from the broker.
      responses:
        '200':
          description: returns the deleted unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unit'
  /units/{unitId}/units:
    parameters:
      - $ref: '#/components/parameters/unitId'
    get:
      tags: ["Private API (relations)"]
      operationId: getRelatedUnits
      summary: Get all units that the unit may see.
      responses:
        '200':
          description: list of all referenced unit ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relations'
    put:
      tags: ["Private API (relations)"]
      operationId: setRelatedUnits
      summary: Set the list of units that the unit may see.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relations'
      responses:
        '200':
          description: returns the new list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relations'
  /units/{unitId}/incidents:
    parameters:
      - $ref: '#/components/parameters/unitId'
    get:
      tags: ["Private API (relations)"]
      operationId: getRelatedIncidents
      summary: Get all incidents that the unit may see.
      responses:
        '200':
          description: list of all referenced incident ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relations'
    put:
      tags: ["Private API (relations)"]
      operationId: setRelatedIncidents
      summary: Set the list of incidents that the unit may see.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relations'
      responses:
        '200':
          description: returns the new list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relations'
  /incidents:
    get:
      tags: ["Private API (CRUD)"]
      operationId: getAllIncidents
      summary: Get all incidents in the broker.
      responses:
        '200':
          description: list of all incidents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/incident'
  /incidents/{incidentId}:
    parameters:
      - $ref: '#/components/parameters/incidentId'
    get:
      tags: ["Private API (CRUD)"]
      operationId: getIncident
      summary: Get an incident in the broker.
      responses:
        '200':
          description: returns the requested incident
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/incident'
    put:
      tags: ["Private API (CRUD)"]
      operationId: createIncident
      summary: Create or replace an incident in the broker.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/incident'
      responses:
        '200':
          description: returns the new incident
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/incident'
    delete:
      tags: ["Private API (CRUD)"]
      operationId: deleteIncident
      summary: Delete an existing incident from the broker.
      responses:
        '200':
          description: returns the deleted incident
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/incident'
  /scope/{unitId}:
    parameters:
      - $ref: '#/components/parameters/unitId'
      - $ref: '#/components/parameters/token'
    get:
      tags: ["Public API"]
      operationId: getScope
      summary: Retrieves all units and incidents that are available for a unit.
      responses:
        '200':
          description: returns all data that the unit may see
          content:
            application/json:
              schema:
                properties:
                  units:
                    type: array
                    items:
                      $ref: '#/components/schemas/publicUnit'
                  incidents:
                    type: array
                    items:
                      $ref: '#/components/schemas/publicIncident'
  /positions/{unitId}:
    parameters:
      - $ref: '#/components/parameters/unitId'
      - $ref: '#/components/parameters/token'
    post:
      tags: ["Public API"]
      operationId: reportPosition
      summary: Report a unit's position.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/position'
      responses:
        '200':
          description: returns the new position
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/position'
components:
  parameters:
    token:
      name: token
      in: query
      requried: true
      schema:
        type: string
    unitId:
      name: unitId
      in: path
      requried: true
      schema:
        type: string
    incidentId:
      name: incidentId
      in: path
      requried: true
      schema:
        type: string
  schemas:
    unit:
      description: |
        A unit on the private interface with all properties.
      allOf:
        - $ref: '#/components/schemas/publicUnit'
        - type: object
          properties:
            token:
              type: string
            units:
              $ref: '#/components/schemas/relations'
            incidents:
              $ref: '#/components/schemas/relations'
    publicUnit:
      description: |
        A unit on the public interface with filtered properties.
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
        lastPosition:
          $ref: '#/components/schemas/position'
        targetPosition:
          $ref: '#/components/schemas/position'
    incident:
      description: |
        An incident on the private interface with all properties.
      allOf:
        - $ref: '#/components/schemas/publicIncident'
    publicIncident:
      description: |
        An incident on the public interface with filtered properties.
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
        priority:
          type: boolean
        blue:
          type: boolean
        info:
          type: string
        location:
          $ref: '#/components/schemas/point'
    point:
      description: |
        A 2D point on the map.
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          description: The latitude of the location in degrees.
          type: number
        longitude:
          description: The longitude of the location in degrees.
          type: number
    position:
      description: |
        A snapshot of a geo objects location and movement.
      allOf:
        - $ref: '#/components/schemas/point'
        - type: object
          required:
            - timestamp
          properties:
            timestamp:
              description: |
                The time of the snapshot as ISO8601 date and time.
              type: string
            accuracy:
              description: The accuracy of the horizontal location in meters.
              type: number
            heading:
              description: The heading of the movement in degrees clockwise from north.
              type: number
            speed:
              description: The speed of the movement in meters per second.
              type: number
    relations:
      definition: |
        An array of ids that refer to other geo objects.
      type: array
      items:
        type: string
